#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#define DIVIDER 10000 // this is used to seperate one equivalence class from other i.e. like braces in set representation

int obj,attr;

   int gaamafunc();

   int ind(int ); //function for dividing objects into respective classes based on decision attribute

   int lower(int , int , int [200],int [200]);

   int join(int , int , int [200]);// combining two indiscernibilities   

   int deci[200];    // this array contains equivalence classes based on decision attribute ..
    
    int a[200];      // this array contains euivalence classes based on other attributes

   int b[200][200];  // array in which the dataset is copied into ..

   int positive[200]; 
  
   void quickreduct(float);  

   void main()
  {
  // taking the data set from a file and then copying into an array ..
  float gaama;
  int i,j,t;
  char d[200];
  char ch;
  FILE *fp;
  fp=fopen("zoho1","r");
  int val=0;
  char *tok;
  i=0;j=0;
  
  while(fgets(d,200,fp)!=NULL)
  {
  j=0;
  tok=strtok(d," ");
  while(tok!=NULL)
  {
     val=atoi(tok);
      b[i][j]=val;
     j++;
    tok=strtok(NULL," ");
   }
  i++;
  attr=j;                    //storing the value of j i.e. the number of columns or attributes
 }
   obj=i;                    // storing the value of i i.e. the number of rows or objects

   printf("the given table is \n");
   for(i=0;i<obj;i++)
   {
    for(j=0;j<attr;j++)
     printf("%d\t",b[i][j]);
     printf("\n");
  }
   fclose(fp);

  
  t= gaamafunc();

  gaama=t/obj;
  
  quickreduct(gaama);
  

}

  int ind(int x)
  {
     int y,z,i,j, c[200],flag;
     y=0,z=0;
     
     for(i=0;i<obj;i++)
    {         
       if(y!=0)
      {
       for(j=0;j<y;j++)
       {
         if(b[i][x]==c[j])
         {
          flag=1;
          break;
          }
        }
       }
      if(flag==0 || y==0)
      { 
        a[z]=DIVIDER;
        z++;
        a[z]=i;
        z++;
             
        for(j=i+1;j<obj;j++)
        {
           if(b[j][x]==b[i][x])
           {
            a[z]=j;
             z++;
            }
        }
     }
     flag=0;
     c[y]=b[i][x];
     y++;
    }
     
    a[z]=DIVIDER;
     z=z+1;
   
   if(x==attr-1)
   {
     for(i=0;i<z;i++)
     deci[i]=a[i];
    }
 
    return z;
}


           
   int lower(int x, int y,int deci[200],int a[200])
   {
         int i,j,z,l,h,d,k,count,flag,flag1;
         int c[200],aux[200];
       for(i=0;i<y;i++)
        c[i]=a[i];
  
        i=0;j=0;k=0;
     
       while(j<=y-1)
     {  
        l=0;
       if(j==y-1)
       break;
       else
      {
       if(c[j]==DIVIDER )
       {
         j++;
         while(c[j]!=DIVIDER)
         {
          aux[l]=c[j];
          l++;j++;
          
         }
        z=l;
       }     

       i=0;
    

      
      while(i<=x-1)
      {
        l=0;count=0;
       
       if(i==x-1)
       break;
       else       
      {
       if(deci[i]==DIVIDER)
       {
         i++;h=i;flag=0;

         while(l<z)
        {
          i=h;
         while(deci[i]!=DIVIDER && l<z)
         {
           if(aux[l]==deci[i])
           {
             count++;i++;l++;
             flag=1;
           
            }
           else
           i++;
          }
         l++;
         }
         if(flag==1)
         {
           if(count==z)
            {
               l=0;
               while(l<z)
               {
                 positive[k]=aux[l];
                l++;k++;
                }
             }
            break;
          }

        
        }//starts at if(deci[i]==DIVIDER)
      }//start at else in while(i<=x-1)
    } // start at while(i<=x-1)              
   } //start at main else
}//start at while(j<=x-1)
return k;                   
}  
    
  int join(int x,int y, int c[200])
   {
       int i,j,m,n,l,k,z,flag,h,mark[20],index[20],aux[20],aux1[200];

      j=0;n=0;
     while(j<=y-1)
     {  
        l=0;
       if(j==y-1)
       break;
       else
      {
       if(c[j]==DIVIDER )
       {
         j++;
         while(c[j]!=DIVIDER)
         {
          aux[l]=c[j];
          mark[l]=0;
          l++;j++;
         }
        z=l;
       }
            
       i=0;
    

      
      while(i<=x-1)
      {
        l=0;
       
       if(i==x-1)
       break;
       else       
      {
       if(a[i]==DIVIDER)
       {
         i++;flag=0;h=i;
         k=0;
         while(l<z)
        {
         i=h;
         while(a[i]!=DIVIDER && l<z)
         {
           if(aux[l]==a[i])
           {
             index[k]=l;
             i++;l++;k++;
             flag=1;
            }
           else    
           i++;
          }
          l++;
         }
         if(flag==1)
         {
           aux1[n]=DIVIDER;
           n++;
           for(m=0;m<k;m++)
           {
             aux1[n]=aux[index[m]];
             mark[index[m]]=1;
              n++;
            }
           
           for(m=0;m<z;m++)
           {
             if(mark[m]==0)
             {
               aux1[n]=DIVIDER;
               n++;
               aux1[n]=aux[m];
                n++;
              }
           }
            break;
             }//starts at if(flag==1)
          }// starts at if(a[i]==DIVIDER) 
        
        }//starts  at else within while(i<=x-1)
       }// starts at while(i<=x-1)
      }// starts at main else within while(j<=y-1)
    }// starts at while(j<=y-1)
 
    aux1[n]=DIVIDER;
    n++;
   for(i=0;i<n;i++)
    a[i]=aux1[i];
   return n;
   }               
             

   int gaamafunc()
   {
    int x,y,s,t,i,k,c[200],l;
    s=1;  
    x=ind(attr-1);
    y=ind(0);
    
    i=lower(x,y,deci,a);
   for(l=0;l<i;l++)
   printf("\n%d\n",positive[l]);

   while(i!=obj && s!=attr-1)
   {
      for(k=0;k<y;k++)
       c[k]=a[k];
      
      t=ind(s);
      
      y=join(t,y,c);
      
      i=lower(x,y,deci,a);
      s++;
   }

   return i;
 }

 void quickreduct(float gaama)
 {
    int i,s,x,y,j,k,m,t;
    k=0;
    float l,p;
    p=obj;
    x=ind(attr-1);
    double gaama1,value;s=0;
    gaama1=0.0;
    value=gaama1;
    int feat[200],mark[200],c[200];
     for(i=0;i<attr-1;i++)
      mark[i]=0;

   while(gaama!=gaama1)
  
  { 
     for(i=0;i<attr-1;i++)
     { 
        if(k==0)
       {
          feat[k]=s;
          y=ind(i);
          j=lower(x,y,deci,a);
          l=j;
          gaama1=(l/p);
          if(gaama1>value)
          {
            value=gaama1;
            s=i;
          }
      }
      else
      {
        if(mark[i]==0)
        {
          y=ind(i);
          t=join(y,m,c);
          j=lower(x,t,deci,a);
          l=j;
          gaama1=(l/p);
         if(gaama1>value)
          {
            value=gaama1;
            s=i;
          }
         }
       }
      }
      feat[k]=s;
      if(k==0)
       m=ind(feat[k]);
      for(i=0;i<m;i++)
       c[i]=a[i];
      mark[feat[k]]=1;
      k++;
      for(i=1;i<k;i++)
      {
        y=ind(feat[i]);
        m=join(y,m,c);
        for(j=0;j<m;j++)
         c[j]=a[j];
      }
  }

  printf("the reduct for the table is \n");  
  for(i=0;i<k;i++)
   printf("%d\t",feat[i]);    
}   
     
    
      



















