#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#define DIVIDER 10000 // this is used to seperate one equivalence class from other i.e. like braces in set representation

   int obj,attr;

   void kappameasure();

   int ind(int ); //function for dividing objects into respective classes based on decision attribute

   int join(int , int , int [200]);// combining two indiscernibilities   

   int deci[200];    // this array contains equivalence classes based on decision attribute ..
    
   int a[200];      // this array contains euivalence classes based on other attributes

   int b[200][200];  // array in which the dataset is copied into ..

   int positive[200]; 
    
   void main()
  {
  // taking the data set from a file and then copying into an array ..
  float gaama;
  int i,j,x,y,z,t,c[200];
  char d[200];
  char ch;
  FILE *fp;
  fp=fopen("zoho1","r");
  int val=0;
  char *tok;
  i=0;j=0;
  
  while(fgets(d,200,fp)!=NULL)
  {
  j=0;
  tok=strtok(d," ");
  while(tok!=NULL)
  {
     val=atoi(tok);
      b[i][j]=val;
     j++;
    tok=strtok(NULL," ");
   }
  i++;
  attr=j;                    //storing the value of j i.e. the number of columns or attributes
 }
   obj=i;                    // storing the value of i i.e. the number of rows or objects

   printf("the given table is \n");
   for(i=0;i<obj;i++)
   {
    for(j=0;j<attr;j++)
     printf("%d\t",b[i][j]);
     printf("\n");
  }
   fclose(fp);

   kappameasure();
 
}

  int ind(int x)
  {
     int y,z,i,j, c[200],flag;
     y=0,z=0;
     
     for(i=0;i<obj;i++)
    {         
       if(y!=0)
      {
       for(j=0;j<y;j++)
       {
         if(b[i][x]==c[j])
         {
          flag=1;
          break;
          }
        }
       }
      if(flag==0 || y==0)
      { 
        a[z]=DIVIDER;
        z++;
        a[z]=i;
        z++;
             
        for(j=i+1;j<obj;j++)
        {
           if(b[j][x]==b[i][x])
           {
            a[z]=j;
             z++;
            }
        }
     }
     flag=0;
     c[y]=b[i][x];
     y++;
    }
     
    a[z]=DIVIDER;
     z=z+1;
   
   if(x==attr-1)
   {
     for(i=0;i<z;i++)
     deci[i]=a[i];
    }
 
    return z;
}


           
   
  int join(int x,int y, int c[200])
   {
       int i,j,m,n,l,k,z,flag,h,mark[20],index[20],aux[20],aux1[200],count;

      j=0;n=0;count=0;
     while(j<=y-1)
     {  
        l=0;
       if(j==y-1)
       break;
       else
      {
       if(c[j]==DIVIDER )
       {
         j++;
         while(c[j]!=DIVIDER)
         {
          aux[l]=c[j];
          mark[l]=0;
          l++;j++;
         }
        z=l;
       }
            
       i=0;
    

      
      while(i<=x-1)
      {
        l=0;
       
       if(i==x-1)
       break;
       else       
      {
       if(a[i]==DIVIDER)
       {
         i++;flag=0;h=i;
         k=0;
         while(l<z)
        {
         i=h;
         while(a[i]!=DIVIDER && l<z)
         {
           if(aux[l]==a[i])
           {
             index[k]=l;
             i++;l++;k++;
             flag=1;
            }
           else    
           i++;
          }
          l++;
         }
         if(flag==1)
         {
           aux1[n]=DIVIDER;
           n++;
           for(m=0;m<k;m++)
           {
             aux1[n]=aux[index[m]];
             mark[index[m]]=1;
              n++;
            }
          if(z==k)
            break;
         else
         {
          aux1[n]=DIVIDER;
               n++; 
           for(m=0;m<z;m++)
           {
             if(mark[m]==0)
             {
               
               aux1[n]=aux[m];
                n++;
              }
           }
          }
            break;
             }//starts at if(flag==1)
          }// starts at if(a[i]==DIVIDER) 
        
        }//starts  at else within while(i<=x-1)
       }// starts at while(i<=x-1)
      }// starts at main else within while(j<=y-1)
    }// starts at while(j<=y-1)
 
    aux1[n]=DIVIDER;
    n++;
   for(i=0;i<n;i++)
  {
    a[i]=aux1[i];
   } 
    
  //for(i=0;i<n;i++)
    //{
      //if(a[i]==DIVIDER)
       //{
        // count++;
        //}            
     //}
    return n;        
  }
   

 void kappameasure()
{
	int i,x,y,z,count,temp,t,check[attr],j,k,c[200];
        float l,m,kappa;

	for(i=0;i<attr-1;i++)
	{
		check[i]=attr-i-2;
	}

       k=attr-3;count=0;t=0;

     while(1)
     {
       z=ind(check[k]);
       for(j=0;j<z;j++)
         c[j]=a[j];
              
	    for(i=k-1;i>=0;i--)
      {
        y=ind(check[i]);
        z=join(y,z,c);
        for(j=0;j<z;j++)
         c[j]=a[j];
      } 
        
       for(j=0;j<z;j++)
         if(a[j]==DIVIDER)
           count++;
       l=count-1;
       
     

      x=ind(attr-1);
      z=join(x,z,c);
 
      count=0;       

       for(j=0;j<z;j++)
         if(a[j]==DIVIDER)
           count++;
       m=count-1;
      kappa=l/m;

     if(kappa<1)
    { 
       k=k+1;
       if(k==t)
        break;
       temp=check[t];
       check[t]=check[k];
       check[k]=temp;
       t=t+1;
    }

     k=k-1;
     count=0;
     }
    
    printf("\n");     
    printf("the reduct for the table is \n");
    for(i=0;i<=t;i++)
     printf("<%d>\t",check[i]);
     printf("\n");
}
       
  
     
    
      


















